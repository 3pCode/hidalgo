// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tuple.proto

/*
	Package tuplepb is a generated protocol buffer package.

	It is generated from these files:
		tuple.proto

	It has these top-level messages:
		Table
		KeyField
		Field
*/
package tuplepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ValueType int32

const (
	ValueType_TYPE_ANY    ValueType = 0
	ValueType_TYPE_BYTES  ValueType = 1
	ValueType_TYPE_STRING ValueType = 2
	ValueType_TYPE_UINT   ValueType = 3
	ValueType_TYPE_INT    ValueType = 4
	ValueType_TYPE_BOOL   ValueType = 5
	ValueType_TYPE_TIME   ValueType = 6
	ValueType_TYPE_FLOAT  ValueType = 7
)

var ValueType_name = map[int32]string{
	0: "TYPE_ANY",
	1: "TYPE_BYTES",
	2: "TYPE_STRING",
	3: "TYPE_UINT",
	4: "TYPE_INT",
	5: "TYPE_BOOL",
	6: "TYPE_TIME",
	7: "TYPE_FLOAT",
}
var ValueType_value = map[string]int32{
	"TYPE_ANY":    0,
	"TYPE_BYTES":  1,
	"TYPE_STRING": 2,
	"TYPE_UINT":   3,
	"TYPE_INT":    4,
	"TYPE_BOOL":   5,
	"TYPE_TIME":   6,
	"TYPE_FLOAT":  7,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTuple, []int{0} }

type Table struct {
	Name string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key  []KeyField `protobuf:"bytes,2,rep,name=key" json:"key"`
	Data []Field    `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptorTuple, []int{0} }

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetKey() []KeyField {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Table) GetData() []Field {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyField struct {
	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ValueType `protobuf:"varint,2,opt,name=type,proto3,enum=nwca.uda.tuple.ValueType" json:"type,omitempty"`
	Auto bool      `protobuf:"varint,3,opt,name=auto,proto3" json:"auto,omitempty"`
}

func (m *KeyField) Reset()                    { *m = KeyField{} }
func (m *KeyField) String() string            { return proto.CompactTextString(m) }
func (*KeyField) ProtoMessage()               {}
func (*KeyField) Descriptor() ([]byte, []int) { return fileDescriptorTuple, []int{1} }

func (m *KeyField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyField) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_TYPE_ANY
}

func (m *KeyField) GetAuto() bool {
	if m != nil {
		return m.Auto
	}
	return false
}

type Field struct {
	Name string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ValueType `protobuf:"varint,2,opt,name=type,proto3,enum=nwca.uda.tuple.ValueType" json:"type,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorTuple, []int{2} }

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_TYPE_ANY
}

func init() {
	proto.RegisterType((*Table)(nil), "nwca.uda.tuple.Table")
	proto.RegisterType((*KeyField)(nil), "nwca.uda.tuple.KeyField")
	proto.RegisterType((*Field)(nil), "nwca.uda.tuple.Field")
	proto.RegisterEnum("nwca.uda.tuple.ValueType", ValueType_name, ValueType_value)
}
func (m *Table) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Table) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTuple(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Key) > 0 {
		for _, msg := range m.Key {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTuple(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTuple(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KeyField) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyField) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTuple(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTuple(dAtA, i, uint64(m.Type))
	}
	if m.Auto {
		dAtA[i] = 0x18
		i++
		if m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTuple(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTuple(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func encodeVarintTuple(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Table) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTuple(uint64(l))
	}
	if len(m.Key) > 0 {
		for _, e := range m.Key {
			l = e.ProtoSize()
			n += 1 + l + sovTuple(uint64(l))
		}
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.ProtoSize()
			n += 1 + l + sovTuple(uint64(l))
		}
	}
	return n
}

func (m *KeyField) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTuple(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTuple(uint64(m.Type))
	}
	if m.Auto {
		n += 2
	}
	return n
}

func (m *Field) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTuple(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTuple(uint64(m.Type))
	}
	return n
}

func sovTuple(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTuple(x uint64) (n int) {
	return sovTuple(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Table) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTuple
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Table: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Table: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTuple
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTuple
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key, KeyField{})
			if err := m.Key[len(m.Key)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTuple
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, Field{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTuple(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTuple
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTuple
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTuple
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ValueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auto = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTuple(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTuple
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTuple
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTuple
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ValueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTuple(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTuple
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTuple(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTuple
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTuple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTuple
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTuple
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTuple(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTuple = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTuple   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tuple.proto", fileDescriptorTuple) }

var fileDescriptorTuple = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x18, 0xc5, 0x19, 0x5a, 0xfe, 0x7d, 0x28, 0x4e, 0x26, 0x21, 0xa9, 0x2e, 0xb0, 0x61, 0xd5, 0x98,
	0x50, 0x0c, 0x9e, 0x80, 0x26, 0x60, 0x50, 0x04, 0x53, 0x46, 0x13, 0xdc, 0x98, 0x29, 0x8c, 0x48,
	0x2c, 0xb4, 0x31, 0x33, 0x31, 0xdd, 0xb8, 0xf3, 0x1e, 0x1e, 0x87, 0xa5, 0x27, 0x70, 0x81, 0x17,
	0x31, 0x7c, 0xc6, 0x46, 0x89, 0x4b, 0x77, 0xef, 0xf7, 0xfa, 0xde, 0xeb, 0x97, 0x0c, 0x94, 0x95,
	0x8e, 0x43, 0xe9, 0xc6, 0x8f, 0x91, 0x8a, 0x58, 0x65, 0xf9, 0x34, 0x11, 0xae, 0x9e, 0x0a, 0x17,
	0xdd, 0x83, 0xc6, 0x6c, 0xae, 0xee, 0x75, 0xe0, 0x4e, 0xa2, 0x45, 0x73, 0x16, 0xcd, 0xa2, 0x26,
	0xc6, 0x02, 0x7d, 0x87, 0x84, 0x80, 0xea, 0xab, 0x5e, 0x7f, 0x86, 0x1c, 0x17, 0x41, 0x28, 0x19,
	0x03, 0x73, 0x29, 0x16, 0xd2, 0x22, 0x36, 0x71, 0x4a, 0x3e, 0x6a, 0x76, 0x0c, 0xc6, 0x83, 0x4c,
	0xac, 0xac, 0x6d, 0x38, 0xe5, 0x96, 0xe5, 0xfe, 0xfe, 0x93, 0x7b, 0x2e, 0x93, 0xee, 0x5c, 0x86,
	0x53, 0xcf, 0x5c, 0xbd, 0x1f, 0x66, 0xfc, 0x4d, 0x94, 0x35, 0xc1, 0x9c, 0x0a, 0x25, 0x2c, 0x03,
	0x2b, 0xd5, 0xed, 0xca, 0xcf, 0x3c, 0x06, 0xeb, 0x02, 0x8a, 0xdf, 0x3b, 0x7f, 0x9e, 0xd0, 0x00,
	0x53, 0x25, 0xb1, 0xb4, 0xb2, 0x36, 0x71, 0x2a, 0xad, 0xfd, 0xed, 0xc1, 0x6b, 0x11, 0x6a, 0xc9,
	0x93, 0x58, 0xfa, 0x18, 0xdb, 0x4c, 0x08, 0xad, 0x22, 0xcb, 0xb0, 0x89, 0x53, 0xf4, 0x51, 0xd7,
	0xcf, 0x20, 0xf7, 0x5f, 0xfb, 0x47, 0x2f, 0x04, 0x4a, 0xa9, 0xc7, 0x76, 0xa0, 0xc8, 0xc7, 0x97,
	0x9d, 0xdb, 0xf6, 0x60, 0x4c, 0x33, 0xac, 0x02, 0x80, 0xe4, 0x8d, 0x79, 0x67, 0x44, 0x09, 0xdb,
	0x83, 0x32, 0xf2, 0x88, 0xfb, 0xbd, 0xc1, 0x29, 0xcd, 0xb2, 0x5d, 0x28, 0xa1, 0x71, 0xd5, 0x1b,
	0x70, 0x6a, 0xa4, 0xed, 0x0d, 0x99, 0xe9, 0x47, 0x6f, 0x38, 0xec, 0xd3, 0x5c, 0x8a, 0xbc, 0x77,
	0xd1, 0xa1, 0xf9, 0x74, 0xbb, 0xdb, 0x1f, 0xb6, 0x39, 0x2d, 0x78, 0xd5, 0xd5, 0xba, 0x46, 0xde,
	0xd6, 0x35, 0xf2, 0xfa, 0x51, 0x23, 0x37, 0x05, 0x3c, 0x36, 0x0e, 0x82, 0x3c, 0x3e, 0xea, 0xc9,
	0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x8d, 0x8f, 0x89, 0x22, 0x02, 0x00, 0x00,
}
